<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Che's Blog</title><link>https://blog.chezs.me/posts/</link><description>Recent content in Posts on Che's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 06 Apr 2021 22:59:41 +0800</lastBuildDate><atom:link href="https://blog.chezs.me/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>鲜活的数据-读书笔记</title><link>https://blog.chezs.me/posts/visualize-this-reading-note/</link><pubDate>Tue, 06 Apr 2021 22:59:41 +0800</pubDate><guid>https://blog.chezs.me/posts/visualize-this-reading-note/</guid><description>清明假期阅读了《鲜活的数据》，这是一本数据可视化入门读物，可以作为《用图表说话》的补充。《用图表说话》，从“确定要表达的信息”出发，“确定相对关系”，最后“选择图表形式”。但是我们有时并不知道“要表达的信息”，《鲜活的数据》给出了一些帮助。
数据可视化通常关注：数据之间的关系、分布、模式和异常。
当数据的维度较少时，一切都很直观。一旦开始考虑更多因素，数据间的关系变得更加复杂，我们可以用数据可视化的方式发现并强调这些关系。
发现关系、分布和模式 第一个方面，发现关系和分布:
两个维度：散点图+回归拟合曲线 通常就够了 三个维度：可以考虑气泡图 多个维度：散点图矩阵，例如Matlab, AntV 多个维度：直方图矩阵 发现差异 第二个方面是发现差异，有时候也意味着发现关键点。
多个维度：热点图、雷达图 多个维度：平行坐标图 减少维度 第三个方面，多个维度太复杂了，需要减少维度。通常会把数据分组。
多维向量法：手动分组，或者分类、聚类 作者提供的一些材料 https://flowingdata.com
图表矩阵
热点图
平行坐标图</description></item><item><title>风险管理入门</title><link>https://blog.chezs.me/posts/risk-manage-getting-started/</link><pubDate>Tue, 09 Mar 2021 00:02:01 +0800</pubDate><guid>https://blog.chezs.me/posts/risk-manage-getting-started/</guid><description>风险管理主要包括：风险识别、风险量化、风险对策
风险识别 收集信息：包括技术复杂度、排期、分工等，涉及技术/人员/时间等多方面成本 执行：贯穿在整个项目中，常见方法：日会、问题同步、checklist 结果：风险事件、风险因素、风险征兆 风险量化 风险的容忍程度：结果指标、上线时间等 执行： 结果指标：求解/模拟期望结果指标 上线时间：给出多种方案的排期 风险对策： 方法论： 避免：针对性的排除特定风险点 减缓：减少投入等 吸纳：准备预防性方案，同时做好被动接受失败的准备 收集信息：当前面临的风险，已经发生的事故 执行： 针对性解决风险点：找主R解决问题，同时进一步思考这是一个事件还是一系列事件，发现背后的问题 减少投入：如果条件允许，减少投入 预防性方案：针对风险征兆，准备兜底 结果： 技术：技术方案、原型、预估收益、预防性方案 协作：协作流程，多方达成一致，主R，定期会议机制 组织：定目标、内部分工</description></item><item><title>再次认识V8引擎</title><link>https://blog.chezs.me/posts/v8-engine-overall/</link><pubDate>Mon, 15 Feb 2021 22:30:47 +0800</pubDate><guid>https://blog.chezs.me/posts/v8-engine-overall/</guid><description>本文于2020.01.03发表到掘金
背景 最近RN新版本支持了V8引擎，也给我一个契机重新认识V8。本文共有2部分，一部分阐述V8内部的组成和优化技术，另一部分阐述V8和RN的关系。
解释与编译：JS在V8的执行过程 如下图所示，JS在V8的执行过程分为解释和编译两种模式。
分为2种模式的原因主要在于：
把JS源码解释为字节码，减少机器码占用的内存空间，牺牲时间换空间 优先进行解释，提高代码的启动速度 针对特定的方法（例如高频调用），JIT编译为机器码，保证运行性能 分层解释与编译，保证V8可维护性 如果考虑垃圾回收，执行过程也可以这样表示。
解释器 Ignition 解释器的输入是JS源码，输出是字节码（bytecode）。同时，还会输出Feedback Vector。
像其他解释器一样，Ignition先根据源码构建AST，接着把AST转换成bytecode，最终在VM上解释运行。
设计bytecode 在设计bytecode时，Ignition采用了Registry Machine来表示bytecode。由于bytecode是机器码的一种抽象表示，因此以Registry Machine的形式表示bytecode，可以让bytecode自然而然地被解释运行。
Ignition使用了r0，r1，r2……和一个acc加法寄存器。
举例：
注意看 LdaNamedProperty a0, [0], [4]，LdaNamedProperty对应着读取obj.x的行为，其中，a0映射到obj，[0]映射到x，[4]映射到Feedback Vector，用来做性能优化。
Feedback Vector Ignition在解释JS源码时，会构建Feedback Vector，并共享给TurboFan。Feedback的结构主要包括4点：
SharedFunctionInfo：闭包的描述信息 Invocation count: 代表这个闭包被执行的次数 Optimized Code: 标记是否存在TurboFan编译出来的优化代码 BinaryOp：记录了闭包输入输出的类型 举例：
function add(x, y) { return x + y } add(1, 2); - feedback vector: 0xb5101eaa091: [FeedbackVector] in OldSpace - length: 1 SharedFunctionInfo: 0xb5101ea99c9 &amp;lt;SharedFunctionInfo add&amp;gt; Optimized Code: 0 Invocation Count: 1 Profiler Ticks: 0 Slot #0 BinaryOp BinaryOp:SignedSmall 注意看BinaryOp:SignedSmall，它的含义是返回了SignedSmall类型。</description></item><item><title>Hello Word</title><link>https://blog.chezs.me/posts/hello-word/</link><pubDate>Mon, 15 Feb 2021 21:37:33 +0800</pubDate><guid>https://blog.chezs.me/posts/hello-word/</guid><description>Hello Word :D</description></item></channel></rss>