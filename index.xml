<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Che's Blog</title><link>https://blog.chezs.me/</link><description>Recent content on Che's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 15 Feb 2021 22:30:47 +0800</lastBuildDate><atom:link href="https://blog.chezs.me/index.xml" rel="self" type="application/rss+xml"/><item><title>再次认识V8引擎</title><link>https://blog.chezs.me/posts/v8-engine-overall/</link><pubDate>Mon, 15 Feb 2021 22:30:47 +0800</pubDate><guid>https://blog.chezs.me/posts/v8-engine-overall/</guid><description>本文于2020.01.03发表到掘金
背景 最近RN新版本支持了V8引擎，也给我一个契机重新认识V8。本文共有2部分，一部分阐述V8内部的组成和优化技术，另一部分阐述V8和RN的关系。
解释与编译：JS在V8的执行过程 如下图所示，JS在V8的执行过程分为解释和编译两种模式。
分为2种模式的原因主要在于：
把JS源码解释为字节码，减少机器码占用的内存空间，牺牲时间换空间 优先进行解释，提高代码的启动速度 针对特定的方法（例如高频调用），JIT编译为机器码，保证运行性能 分层解释与编译，保证V8可维护性 如果考虑垃圾回收，执行过程也可以这样表示。
解释器 Ignition 解释器的输入是JS源码，输出是字节码（bytecode）。同时，还会输出Feedback Vector。
像其他解释器一样，Ignition先根据源码构建AST，接着把AST转换成bytecode，最终在VM上解释运行。
设计bytecode 在设计bytecode时，Ignition采用了Registry Machine来表示bytecode。由于bytecode是机器码的一种抽象表示，因此以Registry Machine的形式表示bytecode，可以让bytecode自然而然地被解释运行。
Ignition使用了r0，r1，r2……和一个acc加法寄存器。
举例：
注意看 LdaNamedProperty a0, [0], [4]，LdaNamedProperty对应着读取obj.x的行为，其中，a0映射到obj，[0]映射到x，[4]映射到Feedback Vector，用来做性能优化。
Feedback Vector Ignition在解释JS源码时，会构建Feedback Vector，并共享给TurboFan。Feedback的结构主要包括4点：
SharedFunctionInfo：闭包的描述信息 Invocation count: 代表这个闭包被执行的次数 Optimized Code: 标记是否存在TurboFan编译出来的优化代码 BinaryOp：记录了闭包输入输出的类型 举例：
function add(x, y) { return x + y } add(1, 2); - feedback vector: 0xb5101eaa091: [FeedbackVector] in OldSpace - length: 1 SharedFunctionInfo: 0xb5101ea99c9 &amp;lt;SharedFunctionInfo add&amp;gt; Optimized Code: 0 Invocation Count: 1 Profiler Ticks: 0 Slot #0 BinaryOp BinaryOp:SignedSmall 注意看BinaryOp:SignedSmall，它的含义是返回了SignedSmall类型。</description></item><item><title>Hello Word</title><link>https://blog.chezs.me/posts/hello-word/</link><pubDate>Mon, 15 Feb 2021 21:37:33 +0800</pubDate><guid>https://blog.chezs.me/posts/hello-word/</guid><description>Hello Word :D</description></item></channel></rss>