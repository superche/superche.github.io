<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Che's Blog</title><link>https://blog.chezs.me/</link><description>Recent content on Che's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 15 Feb 2022 23:30:17 +0800</lastBuildDate><atom:link href="https://blog.chezs.me/index.xml" rel="self" type="application/rss+xml"/><item><title>微信小程序WASM现状更新</title><link>https://blog.chezs.me/posts/wechat-miniprogram-wasm/</link><pubDate>Tue, 15 Feb 2022 23:30:17 +0800</pubDate><guid>https://blog.chezs.me/posts/wechat-miniprogram-wasm/</guid><description>1、兼容性是最大问题 线上情况：占比暂无，但已知一套检测方案
检测 WXWebAssembly 和 WXWebAssembly.instantiate 是否已定义 如未定义或遇到异常，则不兼容 实验情况：iOS不支持，高版本Android支持，低版本Android不支持。
iOS 15.4内置的Safari支持WASM，但微信侧做了限制。
2、功能差异 在加载➡️ 声明➡️ 调用三个阶段都有差异。
2.1、加载 目前仅支持代码包路径，不支持网络路径 编译出来的 .wasm 体积太大，超过代码包体积限制怎么办？ 方法一：把一个 wasm 文件拆分为多个 wasm 文件，然后利用分包加载能力来减少首包体积 方法二：使用 brotli 压缩 wasm 文件 不支持Compile API （端上无法做字节码增强了） 2.2、声明 export 支持函数、Memory、Table（基本够用）iOS 平台暂不支持 Global
2.3、调用 不支持Worker内调用WASM
3、小结 最大的问题还是兼容性，兼容性主要受到操作系统版本影响。升级的周期较长，短期恐怕难以大规模应用。因此基于WASM增强端上能力的思路短期难以落地。
微信小程序为了做卡控，对WASM的加载、声明和调用做了一系列限制，但整体可以接受。</description></item><item><title>工作中要保持理智，避免针对人的情绪，感谢邻居大爷的批评指导</title><link>https://blog.chezs.me/diary/2021-10-29/</link><pubDate>Fri, 29 Oct 2021 00:01:08 +0800</pubDate><guid>https://blog.chezs.me/diary/2021-10-29/</guid><description/></item><item><title>祝我父亲生日快乐</title><link>https://blog.chezs.me/diary/2021-10-28/</link><pubDate>Thu, 28 Oct 2021 23:49:21 +0800</pubDate><guid>https://blog.chezs.me/diary/2021-10-28/</guid><description/></item><item><title>从微服务的反模式联想到微前端</title><link>https://blog.chezs.me/posts/anti-pattern-from-micro-service-to-micro-frontend/</link><pubDate>Tue, 26 Oct 2021 23:49:44 +0800</pubDate><guid>https://blog.chezs.me/posts/anti-pattern-from-micro-service-to-micro-frontend/</guid><description>微前端借鉴了微服务的思想，因此我联想到可以从微服务的反模式吸取经验，更好地落地微前端。
微服务架构的好处包括便于测试，快速，易于部署，细粒度的可扩展性，模块化和敏捷性。然而，开发微服务的时候陷入了服务粒度，数据迁移，组织形式改变和分布式处理的斗争中。
典型的微服务反模式 服务粒度地狱 服务粒度至关重要，它会影响应用的性能、健壮性、可靠性、可测性、甚至发布模型。
服务粒度应该随着业务渐进式发展，但是社区提供了衡量服务粒度的参考。
衡量服务粒度的标准包括：
服务的范围/功能：当一个操作和基本的CRUD操作无关，那么大概率应该拆分为单独的服务 数据库事务：如果不能实现ACID事务，那么大概率要拆分为多个微服务，并达成最终一致性 服务编排的复杂度：当一个逻辑需要调用多个服务时，服务粒度可能太细 依赖地狱 微服务是一种无共享的架构，但是总有一些代码会在微服务之间共享。比如不提供一个身份验证的微服务，而是将身份验证的代码打包成一个jar文件：security.jar，其它服务都能使用。如果安全检查是服务级别的功能，每个服务接收到请求都会检查安全性，这种方式可以很好的提高性能。
但是这会引起依赖地狱。（依赖过多，多重依赖，依赖冲突，依赖循环）最终导致系统性问题，例如安装大量依赖或无法工作。
典型场景包括4种：共享仓库，共享类库，复制，整合（整合可能是相对优雅的依赖处理方案，做成一个单独的服务）
其他 数据迁移和分布式处理与前端的关联似乎不紧密。
微前端反模式 结合微服务的反模式，我总结了两个典型问题的对策。
粒度地狱 可以分析以下几个关键问题，确认是否进行拆分：
性能：评估白屏时间、秒开率，以及完成核心业务流程需要经历的操作、页面跳转 可靠性：评估是否容易被其他业务影响 可测性：评估当前页面是否大量依赖其他业务的流程、数据 发布模型：评估能否独立发布，业务闭环 依赖地狱 可以分析以下几个关键问题：
数量：依赖数量避免过多 形式：NPM包、平台服务（SSO、权限等）、共享仓库、DLL js等 可用性：依赖的测试质量、SLA等 维护团队：评估维护团队是否可靠</description></item><item><title>人菜瘾大 无能狂怒 自省</title><link>https://blog.chezs.me/diary/2021-09-19/</link><pubDate>Sun, 19 Sep 2021 19:31:46 +0800</pubDate><guid>https://blog.chezs.me/diary/2021-09-19/</guid><description/></item><item><title>随想 2021 08</title><link>https://blog.chezs.me/posts/thinking-at-2021-08/</link><pubDate>Sat, 28 Aug 2021 23:24:51 +0800</pubDate><guid>https://blog.chezs.me/posts/thinking-at-2021-08/</guid><description>无论软件开发的酸甜苦辣，计算机和互联网确实给21世纪00年至20年的程序员带来了一笔不小的财富，很多人确实得到了一些收获。比如我自己，在买房买车后，确实产生了一种“升职加薪 当上总经理 出任CEO 赢取白富美 走上人生巅峰 想想还有点小激动”的心态。但是，物质生活的刺激确实不够持久。在激素逐渐回归到常态后，我开始陷入迷茫和痛苦。
我开始不由自主地思考一些抽象的问题，比如，我的人生目标是什么？我尝试着进行回答，例如一个美满的家庭，技术上的突破，开博物馆等等。这些回答看起来有些不着边际，像一个不知所措的人在迷茫中挣扎。
所幸，已经有很多伟人、大师思考过此类问题，遗留了一本本名著，是后人在迷茫中的灯塔，是后人被社会毒打时的盔甲，也是后人自我救赎的指南。
瓦尔登湖是一本讲述隐居故事的书。和Gap Year一样，隐居并不是单纯地逃离社会，而是主动地通过控制影响因素，在不断自我创造的过程中，寻找人生价值的过程。这个过程应该是内心平和地、充满动力地生活，自我依赖和持续创造。在这个过程中，发现人生价值，获得幸福。
回到我自己，家庭和社会因素导致我很难有隐居的机会，但是我仍然可以在日常生活中体验这个过程。比如装修房子，有人喜欢全权委派装修公司，有人喜欢轻工辅料，有人甚至自己动手。由于家庭和工作，我选择轻工辅料，跟进装修的过程中让我体验到为自己付出的满足感，以及选材、设计过程中的快乐。
在技术领域和职业生涯方面，我同样需要创造这样的过程。我想，这个过程可能会从一个比较抽象的问题开始，但是我甚至还没有找到这个问题。那么，让我学习如何提问吧。</description></item><item><title>长时间疲于奔命通常会让身体做更多快思考，错过正确的事。调整节奏，每周复盘，不要像个大笨蛋</title><link>https://blog.chezs.me/diary/2021-08-15/</link><pubDate>Sun, 15 Aug 2021 22:07:19 +0800</pubDate><guid>https://blog.chezs.me/diary/2021-08-15/</guid><description/></item><item><title>食之无味 弃之可惜 996 装修</title><link>https://blog.chezs.me/diary/2021-07-04/</link><pubDate>Sun, 04 Jul 2021 22:06:40 +0800</pubDate><guid>https://blog.chezs.me/diary/2021-07-04/</guid><description/></item><item><title>人生中第一个父亲节在建材城度过，争取装一个温暖的家</title><link>https://blog.chezs.me/diary/2021-06-20/</link><pubDate>Sun, 20 Jun 2021 23:27:18 +0800</pubDate><guid>https://blog.chezs.me/diary/2021-06-20/</guid><description/></item><item><title>冰淇淋和夜晚的凉风让昏昏沉沉将近一个月的大脑终于清醒起来</title><link>https://blog.chezs.me/diary/2021-05-13/</link><pubDate>Thu, 13 May 2021 23:01:05 +0800</pubDate><guid>https://blog.chezs.me/diary/2021-05-13/</guid><description/></item><item><title>攘外必先安内</title><link>https://blog.chezs.me/diary/2021-05-12/</link><pubDate>Wed, 12 May 2021 22:04:46 +0800</pubDate><guid>https://blog.chezs.me/diary/2021-05-12/</guid><description/></item><item><title>避免在同一个上下文替换全局变量/方法，否则容易大坑。例如log4js的replaceConsole存在调用栈溢出风险。层与层之间应该有较强的隔离。</title><link>https://blog.chezs.me/diary/2021-04-27/</link><pubDate>Tue, 27 Apr 2021 22:19:51 +0800</pubDate><guid>https://blog.chezs.me/diary/2021-04-27/</guid><description/></item><item><title>获取简单性的两种方法：一是减少同时关注的本质性复杂度的量，二是避免发生不必要的偶然的复杂度</title><link>https://blog.chezs.me/diary/2021-04-08/</link><pubDate>Thu, 08 Apr 2021 00:51:15 +0800</pubDate><guid>https://blog.chezs.me/diary/2021-04-08/</guid><description/></item><item><title>鲜活的数据-读书笔记</title><link>https://blog.chezs.me/posts/visualize-this-reading-note/</link><pubDate>Tue, 06 Apr 2021 22:59:41 +0800</pubDate><guid>https://blog.chezs.me/posts/visualize-this-reading-note/</guid><description>清明假期阅读了《鲜活的数据》，这是一本数据可视化入门读物，可以作为《用图表说话》的补充。《用图表说话》，从“确定要表达的信息”出发，“确定相对关系”，最后“选择图表形式”。但是我们有时并不知道“要表达的信息”，《鲜活的数据》给出了一些帮助。
数据可视化通常关注：数据之间的关系、分布、模式和异常。
当数据的维度较少时，一切都很直观。一旦开始考虑更多因素，数据间的关系变得更加复杂，我们可以用数据可视化的方式发现并强调这些关系。
发现关系、分布和模式 第一个方面，发现关系和分布:
两个维度：散点图+回归拟合曲线 通常就够了 三个维度：可以考虑气泡图 多个维度：散点图矩阵，例如Matlab, AntV 多个维度：直方图矩阵 发现差异 第二个方面是发现差异，有时候也意味着发现关键点。
多个维度：热点图、雷达图 多个维度：平行坐标图 减少维度 第三个方面，多个维度太复杂了，需要减少维度。通常会把数据分组。
多维向量法：手动分组，或者分类、聚类 作者提供的一些材料 https://flowingdata.com
图表矩阵
热点图
平行坐标图</description></item><item><title>迷茫时往往没有认知主要问题，没有主线逻辑</title><link>https://blog.chezs.me/diary/2021-04-01/</link><pubDate>Thu, 01 Apr 2021 00:34:06 +0800</pubDate><guid>https://blog.chezs.me/diary/2021-04-01/</guid><description/></item><item><title>业务增长时要关注如何赚钱，以及扫清赚钱道路的阻碍；业务稳定时要关注如何省钱，以及对外输出提升影响力</title><link>https://blog.chezs.me/diary/2021-03-31/</link><pubDate>Thu, 01 Apr 2021 00:30:53 +0800</pubDate><guid>https://blog.chezs.me/diary/2021-03-31/</guid><description/></item><item><title>对方案时，要保证多个关键人员掌握细节</title><link>https://blog.chezs.me/diary/2021-03-30/</link><pubDate>Tue, 30 Mar 2021 22:52:23 +0800</pubDate><guid>https://blog.chezs.me/diary/2021-03-30/</guid><description/></item><item><title>在不知所措时，尝试从相似事物中找方案</title><link>https://blog.chezs.me/diary/2021-03-28/</link><pubDate>Sun, 28 Mar 2021 20:18:48 +0800</pubDate><guid>https://blog.chezs.me/diary/2021-03-28/</guid><description/></item><item><title>做正确的事很重要。如果为了达成目标而hack，那么很可能结果是“当你写了一个乱七八糟的程序 它却恰好完成了任务”</title><link>https://blog.chezs.me/diary/2021-03-25/</link><pubDate>Thu, 25 Mar 2021 23:27:15 +0800</pubDate><guid>https://blog.chezs.me/diary/2021-03-25/</guid><description/></item><item><title>不要为了提升局部效率而影响整体复杂度和可用性</title><link>https://blog.chezs.me/diary/2021-03-24/</link><pubDate>Wed, 24 Mar 2021 23:25:39 +0800</pubDate><guid>https://blog.chezs.me/diary/2021-03-24/</guid><description/></item><item><title>100天</title><link>https://blog.chezs.me/diary/2021-03-23/</link><pubDate>Tue, 23 Mar 2021 23:25:25 +0800</pubDate><guid>https://blog.chezs.me/diary/2021-03-23/</guid><description/></item><item><title>在情绪不好时应该主动叫暂停</title><link>https://blog.chezs.me/diary/2021-03-22/</link><pubDate>Mon, 22 Mar 2021 23:25:17 +0800</pubDate><guid>https://blog.chezs.me/diary/2021-03-22/</guid><description/></item><item><title>尽量在一张图只有一种颜色，否则就要考虑这张图表达的内容是否太多了</title><link>https://blog.chezs.me/diary/2021-03-19/</link><pubDate>Fri, 19 Mar 2021 22:54:55 +0800</pubDate><guid>https://blog.chezs.me/diary/2021-03-19/</guid><description/></item><item><title>温暖的家进度更新，学习正面管教</title><link>https://blog.chezs.me/diary/2021-03-14/</link><pubDate>Sun, 14 Mar 2021 22:41:46 +0800</pubDate><guid>https://blog.chezs.me/diary/2021-03-14/</guid><description/></item><item><title>我需要梦想的具像化</title><link>https://blog.chezs.me/diary/2021-03-10/</link><pubDate>Wed, 10 Mar 2021 22:14:27 +0800</pubDate><guid>https://blog.chezs.me/diary/2021-03-10/</guid><description/></item><item><title>如何避免35岁危机？保持健康和竞争力，提升个人影响力，降低消费，保持信心，理性等待时机。</title><link>https://blog.chezs.me/diary/2021-03-08/</link><pubDate>Tue, 09 Mar 2021 00:06:21 +0800</pubDate><guid>https://blog.chezs.me/diary/2021-03-08/</guid><description/></item><item><title>风险管理入门</title><link>https://blog.chezs.me/posts/risk-manage-getting-started/</link><pubDate>Tue, 09 Mar 2021 00:02:01 +0800</pubDate><guid>https://blog.chezs.me/posts/risk-manage-getting-started/</guid><description>风险管理主要包括：风险识别、风险量化、风险对策
风险识别 收集信息：包括技术复杂度、排期、分工等，涉及技术/人员/时间等多方面成本 执行：贯穿在整个项目中，常见方法：日会、问题同步、checklist 结果：风险事件、风险因素、风险征兆 风险量化 风险的容忍程度：结果指标、上线时间等 执行： 结果指标：求解/模拟期望结果指标 上线时间：给出多种方案的排期 风险对策： 方法论： 避免：针对性的排除特定风险点 减缓：减少投入等 吸纳：准备预防性方案，同时做好被动接受失败的准备 收集信息：当前面临的风险，已经发生的事故 执行： 针对性解决风险点：找主R解决问题，同时进一步思考这是一个事件还是一系列事件，发现背后的问题 减少投入：如果条件允许，减少投入 预防性方案：针对风险征兆，准备兜底 结果： 技术：技术方案、原型、预估收益、预防性方案 协作：协作流程，多方达成一致，主R，定期会议机制 组织：定目标、内部分工</description></item><item><title>Dream List</title><link>https://blog.chezs.me/dream/</link><pubDate>Sun, 07 Mar 2021 23:57:16 +0800</pubDate><guid>https://blog.chezs.me/dream/</guid><description>一本专著
一个温暖的家
开一家博物馆
说明 Photo by Green Chameleon on Unsplash
Photo by Patrick Perkins on Unsplash
Photo by Joshua Rawson-Harris on Unsplash</description></item><item><title>人应该有点梦想，眼里要有光</title><link>https://blog.chezs.me/diary/2021-03-07/</link><pubDate>Sun, 07 Mar 2021 23:57:16 +0800</pubDate><guid>https://blog.chezs.me/diary/2021-03-07/</guid><description/></item><item><title>再次认识V8引擎</title><link>https://blog.chezs.me/posts/v8-engine-overall/</link><pubDate>Mon, 15 Feb 2021 22:30:47 +0800</pubDate><guid>https://blog.chezs.me/posts/v8-engine-overall/</guid><description>本文于2020.01.03发表到掘金
背景 最近RN新版本支持了V8引擎，也给我一个契机重新认识V8。本文共有2部分，一部分阐述V8内部的组成和优化技术，另一部分阐述V8和RN的关系。
解释与编译：JS在V8的执行过程 如下图所示，JS在V8的执行过程分为解释和编译两种模式。
分为2种模式的原因主要在于：
把JS源码解释为字节码，减少机器码占用的内存空间，牺牲时间换空间 优先进行解释，提高代码的启动速度 针对特定的方法（例如高频调用），JIT编译为机器码，保证运行性能 分层解释与编译，保证V8可维护性 如果考虑垃圾回收，执行过程也可以这样表示。
解释器 Ignition 解释器的输入是JS源码，输出是字节码（bytecode）。同时，还会输出Feedback Vector。
像其他解释器一样，Ignition先根据源码构建AST，接着把AST转换成bytecode，最终在VM上解释运行。
设计bytecode 在设计bytecode时，Ignition采用了Registry Machine来表示bytecode。由于bytecode是机器码的一种抽象表示，因此以Registry Machine的形式表示bytecode，可以让bytecode自然而然地被解释运行。
Ignition使用了r0，r1，r2……和一个acc加法寄存器。
举例：
注意看 LdaNamedProperty a0, [0], [4]，LdaNamedProperty对应着读取obj.x的行为，其中，a0映射到obj，[0]映射到x，[4]映射到Feedback Vector，用来做性能优化。
Feedback Vector Ignition在解释JS源码时，会构建Feedback Vector，并共享给TurboFan。Feedback的结构主要包括4点：
SharedFunctionInfo：闭包的描述信息 Invocation count: 代表这个闭包被执行的次数 Optimized Code: 标记是否存在TurboFan编译出来的优化代码 BinaryOp：记录了闭包输入输出的类型 举例：
function add(x, y) { return x + y } add(1, 2); - feedback vector: 0xb5101eaa091: [FeedbackVector] in OldSpace - length: 1 SharedFunctionInfo: 0xb5101ea99c9 &amp;lt;SharedFunctionInfo add&amp;gt; Optimized Code: 0 Invocation Count: 1 Profiler Ticks: 0 Slot #0 BinaryOp BinaryOp:SignedSmall 注意看BinaryOp:SignedSmall，它的含义是返回了SignedSmall类型。</description></item><item><title>Hello Word</title><link>https://blog.chezs.me/posts/hello-word/</link><pubDate>Mon, 15 Feb 2021 21:37:33 +0800</pubDate><guid>https://blog.chezs.me/posts/hello-word/</guid><description>Hello Word :D</description></item></channel></rss>